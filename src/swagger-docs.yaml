openapi: 3.0.0
info:
  title: Gadget API
  version: 1.0.0
  description: API to manage gadgets, including creating, updating, and self-destructing gadgets.

paths:
  /api/gadgets:
    get:
      summary: Get all gadgets or filter by status
      description: Retrieve a list of gadgets. Optionally, filter by status.
      parameters:
        - name: status
          in: query
          required: false
          schema:
            type: string
            description: The status to filter gadgets by.
      responses:
        "200":
          description: A list of gadgets with their success probability
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    gadgetId:
                      type: integer
                    codename:
                      type: string
                    status:
                      type: string
                    successProbability:
                      type: integer
                      description: A random success probability between 0 and 100.
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message

    post:
      summary: Create a new gadget
      description: Create a new gadget with a randomly generated codename.
      responses:
        "201":
          description: The created gadget
          content:
            application/json:
              schema:
                type: object
                properties:
                  gadgetId:
                    type: integer
                  codename:
                    type: string
                  status:
                    type: string
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message

  /api/gadgets/{id}:
    put:
      summary: Update a gadget
      description: Update an existing gadget's information.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the gadget to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                codename:
                  type: string
                status:
                  type: string
      responses:
        "200":
          description: The updated gadget
          content:
            application/json:
              schema:
                type: object
                properties:
                  gadgetId:
                    type: integer
                  codename:
                    type: string
                  status:
                    type: string
        "404":
          description: Gadget not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message

    delete:
      summary: Decommission a gadget
      description: Mark a gadget as "Decommissioned" instead of deleting it.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the gadget to decommission.
      responses:
        "200":
          description: Gadget decommissioned
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: The gadget has been decommissioned.
        "404":
          description: Gadget not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message

  /api/gadgets/{id}/self-destruct:
    post:
      summary: Self-destruct a gadget
      description: Trigger the self-destruction of a gadget by changing its status to "Destroyed".
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the gadget to self-destruct.
      responses:
        "200":
          description: Gadget self-destruct initiated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  confirmationCode:
                    type: string
                    description: A confirmation code for the self-destruction action.
        "400":
          description: Gadget already destroyed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "404":
          description: Gadget not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message

  /api/auth/register:
    post:
      summary: Register a new user
      description: Create a new user account with an email and password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: The user's email address.
                password:
                  type: string
                  description: The user's password.
      responses:
        "201":
          description: User successfully registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    type: object
                    properties:
                      id:
                        type: integer
                      email:
                        type: string
                  token:
                    type: string
                    description: JWT token for authentication.
        "400":
          description: User already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message

  /api/auth/login:
    post:
      summary: User login
      description: Authenticate a user and return a JWT token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: The user's email address.
                password:
                  type: string
                  description: The user's password.
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Success message.
                  token:
                    type: string
                    description: JWT token for authentication.
        "400":
          description: Invalid email or password
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message
